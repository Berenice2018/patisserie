package de.avkterwey.baking.data.database;

import android.arch.persistence.db.SupportSQLiteOpenHelper;
import android.arch.persistence.room.Database;
import android.arch.persistence.room.DatabaseConfiguration;
import android.arch.persistence.room.InvalidationTracker;
import android.arch.persistence.room.Room;
import android.arch.persistence.room.RoomDatabase;
import android.arch.persistence.room.TypeConverters;
import android.content.Context;
import android.support.annotation.NonNull;

import de.avkterwey.baking.model.Ingredient;
import de.avkterwey.baking.model.Recipe;
import de.avkterwey.baking.model.Step;
import de.avkterwey.baking.utils.ConverterUtil;


/*
 * Created by Berenice on 18.05.18.
 */

@TypeConverters(ConverterUtil.class)
@Database(entities = {Recipe.class, Ingredient.class, Step.class}, version = 1, exportSchema = false)


public abstract class AppDatabase extends RoomDatabase {

    private static final Object LOCK = new Object();
    private static final String DB_NAME = "dbName";
    private static AppDatabase sInstance;


    // Singleton
    public static AppDatabase getInstance(Context context){
        if(sInstance == null){
            synchronized (LOCK){
                sInstance = Room.databaseBuilder(context.getApplicationContext(),
                        AppDatabase.class,
                        DB_NAME)
                        // TODO
                        //.allowMainThreadQueries()
                .build();
            }
        }

        return sInstance;
    }


    // DAO for Room
    public abstract IRecipeDao recipeDao();



    /**
     * Creates the open helper to access the database. Generated class already implements this
     * method.
     * Note that this method is called when the RoomDatabase is initialized.
     *
     * @param config The configuration of the Room database.
     * @return A new SupportSQLiteOpenHelper to be used while connecting to the database.
     */
    @NonNull
    @Override
    protected SupportSQLiteOpenHelper createOpenHelper(DatabaseConfiguration config) {
        return null;
    }

    /**
     * Called when the RoomDatabase is created.
     * <p>
     * This is already implemented by the generated code.
     *
     * @return Creates a new InvalidationTracker.
     */
    @NonNull
    @Override
    protected InvalidationTracker createInvalidationTracker() {
        return null;
    }

    /**
     * Deletes all rows from all the tables that are registered to this database as
     * {@link Database#entities()}.
     * <p>
     * This does NOT reset the auto-increment value generated by {@link PrimaryKey#autoGenerate()}.
     * <p>
     * After deleting the rows, Room will set a WAL checkpoint and run VACUUM. This means that the
     * data is completely erased. The space will be reclaimed by the system if the amount surpasses
     * the threshold of database file size.
     *
     * @see <a href="https://www.sqlite.org/fileformat.html">Database File Format</a>
     */
    @Override
    public void clearAllTables() {

    }
}
